{"version":3,"file":"main.a0801d0863f289bcb5a3.hot-update.js","sources":["webpack:///./src/lib/Bay.svelte"],"sourcesContent":["/* src/lib/Bay.svelte generated by Svelte v3.38.2 */\nimport {\n\tSvelteComponent,\n\tcheck_outros,\n\tcreate_component,\n\tdestroy_component,\n\tdestroy_each,\n\tdetach,\n\tempty,\n\tgroup_outros,\n\tinit,\n\tinsert,\n\tmount_component,\n\tsafe_not_equal,\n\ttransition_in,\n\ttransition_out\n} from \"svelte/internal\";\n\nimport Card from \"./Card.svelte\";\nimport Voice from \"./Voice.svelte\";\n\nfunction get_each_context(ctx, list, i) {\n\tconst child_ctx = ctx.slice();\n\tchild_ctx[1] = list[i];\n\treturn child_ctx;\n}\n\n// (10:4) {#each voices as voice}\nfunction create_each_block(ctx) {\n\tlet voice;\n\tlet current;\n\tvoice = new Voice({ props: { states: /*voice*/ ctx[1].seq } });\n\n\treturn {\n\t\tc() {\n\t\t\tcreate_component(voice.$$.fragment);\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tmount_component(voice, target, anchor);\n\t\t\tcurrent = true;\n\t\t},\n\t\tp(ctx, dirty) {\n\t\t\tconst voice_changes = {};\n\t\t\tif (dirty & /*voices*/ 1) voice_changes.states = /*voice*/ ctx[1].seq;\n\t\t\tvoice.$set(voice_changes);\n\t\t},\n\t\ti(local) {\n\t\t\tif (current) return;\n\t\t\ttransition_in(voice.$$.fragment, local);\n\t\t\tcurrent = true;\n\t\t},\n\t\to(local) {\n\t\t\ttransition_out(voice.$$.fragment, local);\n\t\t\tcurrent = false;\n\t\t},\n\t\td(detaching) {\n\t\t\tdestroy_component(voice, detaching);\n\t\t}\n\t};\n}\n\n// (9:0) <Card>\nfunction create_default_slot(ctx) {\n\tlet each_1_anchor;\n\tlet current;\n\tlet each_value = /*voices*/ ctx[0];\n\tlet each_blocks = [];\n\n\tfor (let i = 0; i < each_value.length; i += 1) {\n\t\teach_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));\n\t}\n\n\tconst out = i => transition_out(each_blocks[i], 1, 1, () => {\n\t\teach_blocks[i] = null;\n\t});\n\n\treturn {\n\t\tc() {\n\t\t\tfor (let i = 0; i < each_blocks.length; i += 1) {\n\t\t\t\teach_blocks[i].c();\n\t\t\t}\n\n\t\t\teach_1_anchor = empty();\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tfor (let i = 0; i < each_blocks.length; i += 1) {\n\t\t\t\teach_blocks[i].m(target, anchor);\n\t\t\t}\n\n\t\t\tinsert(target, each_1_anchor, anchor);\n\t\t\tcurrent = true;\n\t\t},\n\t\tp(ctx, dirty) {\n\t\t\tif (dirty & /*voices*/ 1) {\n\t\t\t\teach_value = /*voices*/ ctx[0];\n\t\t\t\tlet i;\n\n\t\t\t\tfor (i = 0; i < each_value.length; i += 1) {\n\t\t\t\t\tconst child_ctx = get_each_context(ctx, each_value, i);\n\n\t\t\t\t\tif (each_blocks[i]) {\n\t\t\t\t\t\teach_blocks[i].p(child_ctx, dirty);\n\t\t\t\t\t\ttransition_in(each_blocks[i], 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\teach_blocks[i] = create_each_block(child_ctx);\n\t\t\t\t\t\teach_blocks[i].c();\n\t\t\t\t\t\ttransition_in(each_blocks[i], 1);\n\t\t\t\t\t\teach_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tgroup_outros();\n\n\t\t\t\tfor (i = each_value.length; i < each_blocks.length; i += 1) {\n\t\t\t\t\tout(i);\n\t\t\t\t}\n\n\t\t\t\tcheck_outros();\n\t\t\t}\n\t\t},\n\t\ti(local) {\n\t\t\tif (current) return;\n\n\t\t\tfor (let i = 0; i < each_value.length; i += 1) {\n\t\t\t\ttransition_in(each_blocks[i]);\n\t\t\t}\n\n\t\t\tcurrent = true;\n\t\t},\n\t\to(local) {\n\t\t\teach_blocks = each_blocks.filter(Boolean);\n\n\t\t\tfor (let i = 0; i < each_blocks.length; i += 1) {\n\t\t\t\ttransition_out(each_blocks[i]);\n\t\t\t}\n\n\t\t\tcurrent = false;\n\t\t},\n\t\td(detaching) {\n\t\t\tdestroy_each(each_blocks, detaching);\n\t\t\tif (detaching) detach(each_1_anchor);\n\t\t}\n\t};\n}\n\nfunction create_fragment(ctx) {\n\tlet card;\n\tlet current;\n\n\tcard = new Card({\n\t\t\tprops: {\n\t\t\t\t$$slots: { default: [create_default_slot] },\n\t\t\t\t$$scope: { ctx }\n\t\t\t}\n\t\t});\n\n\treturn {\n\t\tc() {\n\t\t\tcreate_component(card.$$.fragment);\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tmount_component(card, target, anchor);\n\t\t\tcurrent = true;\n\t\t},\n\t\tp(ctx, [dirty]) {\n\t\t\tconst card_changes = {};\n\n\t\t\tif (dirty & /*$$scope, voices*/ 17) {\n\t\t\t\tcard_changes.$$scope = { dirty, ctx };\n\t\t\t}\n\n\t\t\tcard.$set(card_changes);\n\t\t},\n\t\ti(local) {\n\t\t\tif (current) return;\n\t\t\ttransition_in(card.$$.fragment, local);\n\t\t\tcurrent = true;\n\t\t},\n\t\to(local) {\n\t\t\ttransition_out(card.$$.fragment, local);\n\t\t\tcurrent = false;\n\t\t},\n\t\td(detaching) {\n\t\t\tdestroy_component(card, detaching);\n\t\t}\n\t};\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet { voices = [{ name: \"Red\", seq: Array(16).fill(false) }] } = $$props;\n\n\t$$self.$$set = $$props => {\n\t\tif (\"voices\" in $$props) $$invalidate(0, voices = $$props.voices);\n\t};\n\n\treturn [voices];\n}\n\nclass Bay extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, { voices: 0 });\n\t}\n}\n\nexport default Bay;\nBay.__docgen = {\"version\":3,\"name\":\"Bay.svelte\",\"data\":[{\"visibility\":\"public\",\"description\":null,\"keywords\":[],\"name\":\"voices\",\"kind\":\"let\",\"static\":false,\"readonly\":false,\"type\":{\"kind\":\"type\",\"text\":\"any\",\"type\":\"any\"}}],\"computed\":[],\"methods\":[],\"components\":[],\"description\":null,\"keywords\":[],\"events\":[],\"slots\":[],\"refs\":[]};"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAgsourceRoot":""}